{"code":"// PS: 饼图非常吃数据，想要好看的饼图，必须有合格的数据支持\n\n// mock 数据\nconst dataArray = [\n    { name: '教师', num: 2000 },\n    { name: '医生', num: 9000 }\n]\n// const dataArr = [\n//     { name: '女', num: 50 },\n//     { name: '男', num: 50 }\n// ]\n// 计算总数\nlet total = dataArray.reduce((p,v) => { return p + v.num }, 0)\n\nconst colorList = [\n    [{ offset: 0, color: 'rgba(173, 255, 248, 1)'},  { offset: 1, color: 'rgba(50, 255, 238, 1)'}],\n    [{ offset: 0, color: 'rgba(177, 255, 237, 1)'},  { offset: 1, color: 'rgba(0, 233, 179, 1)'}]\n]\n// const colorList2 = [\n//     [{ offset: 0, color: '#68d3ff'},  { offset: 1, color: '#bfecff'}],\n//     [{ offset: 0, color: '#ff938d'},  { offset: 1, color: '#ffdfdd'}],\n// ]\n\nconst color = [ 'rgba(50, 255, 238, 1)', 'rgba(0, 233, 179, 1)', 'rgba(29, 246, 66, 1)', 'rgba(240, 255, 71, 1)', 'rgba(255, 213, 47, 1)', 'rgba(255, 126, 76, 1)', 'rgba(255, 96, 86, 1)', 'rgba(97, 187, 255, 1)', ]\nconst color2 = ['#00a7ec', '#ff564c']\n// data数据\nconst echartData = dataArray.map((v, i) => ({\n    name: v.name,\n    value: v.num,\n    itemStyle: { \n        color: { type: 'linear', colorStops: colorList[i] }\n    },\n    label: {\n        color: color[i]\n    }\n}))\n\n// const totalData = dataArr.map((v, i) => ({\n//     name: v.name,\n//     value: v.num,\n//     itemStyle: { color: { type: 'linear', colorStops: colorList2[i] } },\n//     label: { color: color2[i] }\n// }))\nconst title = {\n    subtext:'共发布活动',//副标题文本\n    x:'center',//水平安放位置，默认为'left'，可选为：'center' | 'left' | 'right' | {number}（x坐标，单位px）\n    y: 'center'\n}\n// tooltip\nconst tooltip = {\n    trigger: 'item',\n    formatter: params => {\n        return `\n            <div>${params.data.name}: ${params.data.value}</div>\n        `\n    }\n}\nconst legend = {\n        icon:'circle',\n        orient: 'vertical',\n        top: 'center',\n        right: 50,\n        textStyle: {\n            align: 'right',\n            verticalAlign: 'middle',\n            rich: {\n                name: {\n                    color: 'rgba(255,255,255,0.5)',\n                    fontSize: 10,\n                },\n                value: {\n                    color: 'rgba(255,255,255,0.5)',\n                    fontSize: 10,\n                },\n                rate: {\n                    color: 'rgba(255,255,255,0.9)',\n                    fontSize: 10,\n                },\n            },\n        },\n        data: dataArray,\n        formatter: (name) => {\n            if (dataArray.length) {\n                const items = dataArray.filter((item) => item.name === name)[0];\n                return `{name|${name}：}{value| ${items.num}} {rate| ${items.num}%}`;\n            }\n        },\n    }\n// series\nconst series = [{\n    name: '从业人员统计',\n    type: 'pie',\n    radius: ['50%', '70%'],\n    center: ['50%', '50%'],\n    avoidLabelOverlap: false,\n    label: {\n        normal: {\n            show: false,\n            position: 'center',\n            formatter: '{value|{c}}\\n{label|{b}}',\n            rich: {\n                value: {\n                    padding: 5,\n                    align: 'center',\n                    verticalAlign: 'middle',\n                    fontSize: 32,\n                },\n                label: {\n                    align: 'center',\n                    verticalAlign: 'middle',\n                    fontSize: 16,\n                },\n            },\n        },\n        emphasis: {\n            show: true,\n            textStyle: {\n                fontSize: '12'\n            },\n        },\n    },\n    data: echartData,\n}]\ngetDefaultSelected(myChart)\nfunction getDefaultSelected(myChart) {\n    let index = 0;\n    myChart.dispatchAction({\n        type: 'highlight',\n        seriesIndex: 0,\n        dataIndex: 0,\n    });\n    myChart.on('mouseover', (e) => {\n        if (e.dataIndex !== index) {\n            myChart.dispatchAction({\n            type: 'downplay',\n            seriesIndex: 0,\n            dataIndex: index,\n            });\n        }\n    });\n    myChart.on('mouseout', (e) => {\n        index = e.dataIndex;\n        myChart.dispatchAction({\n            type: 'highlight',\n            seriesIndex: 0,\n            dataIndex: e.dataIndex,\n        });\n    });\n}\n// 渲染\noption = { tooltip,series, color, backgroundColor: 'rgba(0, 0, 0, .8)',legend }"}
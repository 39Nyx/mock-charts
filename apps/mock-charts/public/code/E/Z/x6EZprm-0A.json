{"code":"const srcData = [\n  ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  [-220, -182, -191, -234, -290, -330, -310],\n//   [220, 182, 191, 234, 290, 330, 310],\n//   [2.2, 1.82, 1.91, 2.34, 2.90, 2.30, 1.10],\n  [2.2, 1.82, 1.91, 2.34, 1.90, 2.30, 2.10]\n];\n\nconst getValueExtend = (data, bindZero) => {\n    let min = Math.min(...data);\n    let max = Math.max(...data);\n    if (min > 0 && bindZero) {\n        min = 0;\n    }\n    if (max < 0 && bindZero) {\n        max = 0;\n    }\n    return [min, max];\n};\n\nconst roundNumber = echarts.number.round;\nconst getPrecision = echarts.number.getPrecision;\nconst niceValueExtend = (extend, splitNumber = 5) => {\n    const [min, max] = extend;\n    const span = max - min;\n    const interval = span / splitNumber;\n    const niceInterval = echarts.number.nice(interval, true);\n    \n    const precision = getPrecision(niceInterval);\n    const niceMin = roundNumber(Math.floor(min / niceInterval) * niceInterval, precision);\n    const niceMax = roundNumber(Math.ceil(max / niceInterval) * niceInterval, precision);\n    \n    return {\n        min: niceMin,\n        max: niceMax,\n        interval: niceInterval\n    };\n};\n\nconst subNice = (value) => {\n    const ticks = [1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10];\n    const exponent = echarts.number.quantityExponent(value);\n    const exp10 = Math.pow(10, exponent);\n    const f = value / exp10; // 1 <= f < 10\n    \n    let nf;\n    for (let i = 0; i < ticks.length; i++) {\n        const item = ticks[i];\n        if (f <= item) {\n            nf = item;\n            break;\n        }\n    }\n    \n    let niceValue = nf * exp10;\n\n    // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).\n    // 20 is the uppper bound of toFixed.    \n    if (exponent >= -20) {\n        if (exponent < 0) {\n            niceValue = niceValue.toFixed(-exponent);\n        } else {\n            niceValue = niceValue.toFixed(0);\n        }\n    }\n    \n    return Number(niceValue);\n};\n\nconst subNiceValueExtend = (extend, splitNumber) => {\n    const [min, max] = extend;\n    const span = max - min;\n    const interval = span / (splitNumber - 1);\n    const niceInterval = subNice(interval);\n    const precision = getPrecision(niceInterval);\n    const niceMin = roundNumber(Math.floor(min / niceInterval) * niceInterval, precision);\n    const niceMax = roundNumber(niceMin + splitNumber * niceInterval, precision);\n    return {\n        min: niceMin,\n        max: niceMax,\n        interval: niceInterval\n    };\n};\n\nconst nice = niceValueExtend(getValueExtend(srcData[1], true));\nconst count = (nice.max - nice.min) / nice.interval;\nconst sub = subNiceValueExtend(getValueExtend(srcData[2], true), count);\n\noption = {\n    title: {\n        text: 'Awesome Chart'\n    },\n    tooltip: {\n        trigger: 'axis'\n    },\n    xAxis: {\n        data: srcData[0]\n    },\n    yAxis: [\n        {\n            min: nice.min,\n            max: nice.max,\n            interval: nice.interval,\n        },\n        {\n            min: sub.min,\n            max: sub.max,\n            interval: sub.interval,\n        }\n    ],\n    series: [\n        {\n            type: 'bar',\n            data: srcData[1]\n        },\n        {\n            type: 'line',\n            data: srcData[2],\n            yAxisIndex: 1\n        }\n    ]\n};\n"}
{"code":"var data = [\n            {\n                \"root\": \"service1\",\n                \"clients\": [\n                    \"service11\",\n                    \"service12\"\n                ]\n            },\n            {\n                \"root\": \"service2\",\n                \"clients\": [\n                    \"service21\",\n                    \"service22\"\n                ],\n                \"servers\": [\n                    \"service12\"\n                ]\n            }\n        ];\n\nfunction get_nodes(data) {\n    var nodes = [];\n    var tmp_nodes = [];\n    for (var root_i in data) {\n        tmp_nodes.push(data[root_i].root);\n        nodes.push(\n            {\n                'name':data[root_i].root,\n                'x':100,\n                'y':(parseInt(root_i)+1)*100,\n                'label': {\n                    'normal': {\n                        'show': true,\n                        textStyle: {\n                            'color': 'red',\n                            'fontSize': 8\n                        }\n                    }\n                }\n            }\n        );\n        var clients = data[root_i].clients;\n        var servers = data[root_i].servers;\n        var coord_i = parseInt(root_i)+1;\n        for (var client_i in clients) {\n            if (tmp_nodes.indexOf(clients[client_i]) >= 0) {\n                continue;\n            }else{\n                tmp_nodes.push(clients[client_i])\n            }\n            nodes.push(\n                {\n                    'name':clients[client_i],\n                    'x':(parseInt(root_i)+1)*200,\n                    'y':(parseInt(coord_i)+parseInt(client_i))*100,\n                    'label': {\n                        'normal': {\n                            'show': true,\n                            textStyle: {\n                                'color': 'red',\n                                'fontSize': 8\n                            }\n                        }\n                    }\n                }\n            );\n            coord_i += 1;\n        }\n        for (var server_i in servers) {\n            if (tmp_nodes.indexOf(servers[server_i]) >= 0) {\n                continue;\n            }else{\n                tmp_nodes.push(servers[server_i])\n            }\n            nodes.push(\n                {\n                    'name':servers[server_i],\n                    'x':(parseInt(root_i)+1)*200,\n                    'y': (parseInt(coord_i)+parseInt(server_i))*100,\n                    'label': {\n                        'normal': {\n                            'show': true,\n                            textStyle: {\n                                'color': 'red',\n                                'fontSize': 8\n                            }\n                        }\n                    }\n                }\n            );\n            coord_i += 1;\n        }\n    }\n    return nodes;\n}\n\nfunction get_links(data) {\n    var links = [];\n    for (var root_i in data) {\n        var clients = data[root_i].clients;\n        var servers = data[root_i].servers;\n        for (var client_i in clients) {\n            links.push({'source': clients[client_i], 'target': data[root_i].root})\n        }\n        for (var server_i in servers) {\n            links.push({'source': data[root_i].root, 'target': servers[server_i]})\n        }\n    }\n    return links;\n}\n\nvar option = {\n    title: {\n        text: '调用关系构建'\n    },\n    tooltip: {},\n    series: [{\n        type: 'graph',\n        legendHoverLink: true,\n        layout: 'none',\n        focusNodeAdjacency: true,\n        symbolSize: 50,\n        roam: true,\n        label: {\n            normal: {\n                show: true\n            }\n        },\n        edgeSymbol: ['circle', 'arrow'],\n        edgeSymbolSize: [4, 10],\n        edgeLabel: {\n            normal: {\n                textStyle: {\n                    fontSize: 8\n                }\n            }\n        },\n        itemStyle: {\n            normal: {\n                color: '#ccc',\n                borderColor: '#1af'\n            }\n        },\n        data: get_nodes(data),\n        links: get_links(data),\n        lineStyle: {\n            normal: {\n                color: '#1af',\n                opacity: 0.9,\n                width: 2,\n                curveness: 0.2\n            }\n        }\n    }]\n};\nmyChart.setOption(option);"}
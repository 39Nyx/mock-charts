{"code":"var uploadedDataURL = \"/asset/get/s/data-1600144886557-K7S0JH-l9.json\";\n\n\nconst color = {\n    bar: '#0F318825',\n    area_normal: '#C5F9E1',\n    area_yellow: '#FFF2DA',\n    area_red: '#FFCFE1',\n    line_normal: '#0F318880',\n    line_yellow: '#E9AF36',\n    line_red: '#DC0D5C'\n};\n\nmyChart.showLoading();\n\nfunction setOption({\n    xAxis,\n    realData,\n    redlineData,\n    yellowlineData,\n    smooth7Data\n}) {\n    let yAxisMax = Math.max(...realData.map(item => item.value), ...redlineData, ...smooth7Data) * 12 / 10;\n    option = {\n        /*grid: {\n            left: 0,\n            top: 10,\n            right: 10,\n            bottom: 10,\n            containLabel: true\n        },*/\n        toolbox: {\n            feature: {\n                dataZoom: {\n                    show: true,\n                    yAxisIndex: false\n                },\n                restore: {\n                    show: true\n                }\n            },\n            iconStyle: {\n                color: 'transparent'\n            },\n            left: 'center',\n            top: 'middle',\n            zlevel: -1\n\n        },\n        xAxis: [{\n            type: 'category',\n            show: true,\n            data: xAxis,\n            axisTick: {\n                alignWithLabel: true\n            }\n        }, {\n            type: 'category',\n            boundaryGap: false,\n            show: false,\n            data: xAxis,\n            axisPointer: {\n                lineStyle: {\n                    color: 'transparent'\n                }\n            }\n        }],\n        yAxis: {\n            type: 'value',\n            max: yAxisMax,\n            boundaryGap: [0, 0],\n            axisLine: {\n                show: false\n            },\n            axisTick: {\n                lineStyle: {\n                    type: 'dashed'\n                }\n            },\n            splitLine: {\n                show: false,\n                lineStyle: {\n                    color: '#eee',\n                    type: 'dashed'\n                }\n            },\n            axisLabel: {\n                showMaxLabel: false\n            },\n            z: 10\n        },\n        series: [\n            // 柱状图部分=>真实数据\n            {\n                name: 'real',\n                data: realData,\n                type: 'bar',\n                itemStyle: {\n                    color: color.bar\n                },\n                emphasis: {\n                    itemStyle: {\n                        color: color.bar\n                    }\n                },\n                xAxisIndex: 0\n            },\n            // 绘制背景部分\n            {\n                name: 'redline',\n                data: redlineData,\n                silent: true,\n                type: 'line',\n                xAxisIndex: 1,\n                smooth: true,\n                // step: true,\n                lineStyle: {\n                    width: 0\n                },\n                itemStyle: {\n                    opacity: 0\n                },\n                showSymbol: false,\n                areaStyle: {\n                    color: color.area_yellow\n                },\n                markArea: {\n                    silent: true,\n                    itemStyle: {\n                        color: color.area_red\n                    },\n                    data: [\n                        [{\n                                yAxis: 0\n                            },\n                            {\n                                yAxis: yAxisMax\n                            }\n                        ]\n                    ]\n                }\n            }, {\n                name: 'yellowline',\n                data: yellowlineData,\n                silent: true,\n                type: 'line',\n                xAxisIndex: 1,\n                itemStyle: {\n                    opacity: 0\n                },\n                smooth: true,\n                lineStyle: {\n                    width: 0\n                },\n                showSymbol: false,\n                areaStyle: {\n                    color: color.area_normal\n                }\n            },\n            // 真实数据处理后的值拆分成三条线进行绘制以达到多色预警效果\n            ...(() => {\n                let normal = [];\n                let yellowline = [];\n                let redline = [];\n                let lastIndex = smooth7Data.length - 1;\n\n                function handler(a, b, c, item, i) {\n                    a.push(null);\n                    b.push(null);\n                    c.push({ // 添加到对应线段\n                        value: item,\n                        symbol: i === lastIndex ? 'rect' : 'none'\n                    });\n                    i = i - 1;\n                    if (i > -1 && _.isNil(c[i])) { // 为了连续性若上一个数是空则补齐, 这个数据不应在tooltip时展现\n                        c[i] = {\n                            symbol: 'none',\n                            _tooltip_disabled: true,\n                            value: smooth7Data[i]\n                        };\n                    }\n                }\n                _.forEach(smooth7Data, (item, i) => {\n                    if (item > redlineData[i]) { // 超过当时的红色预警值\n                        handler(normal, yellowline, redline, item, i);\n                    } else if (item > yellowlineData[i]) { // 超过当时黄色预警值\n                        handler(normal, redline, yellowline, item, i);\n                    } else { // 正常情况\n                        handler(redline, yellowline, normal, item, i);\n                    }\n                });\n                return [{\n                    name: 'normal',\n                    data: normal,\n                    lineStyle: {\n                        color: color.line_normal\n                    },\n                    itemStyle: {\n                        color: color.line_normal\n                    }\n                }, {\n                    name: 'yellow',\n                    data: yellowline,\n                    lineStyle: {\n                        color: color.line_yellow\n                    },\n                    itemStyle: {\n                        color: color.line_yellow\n                    }\n                }, {\n                    name: 'red',\n                    data: redline,\n                    lineStyle: {\n                        color: color.line_red\n                    },\n                    itemStyle: {\n                        color: color.line_red\n                    }\n                }].map((item, i) => {\n                    return _.merge({\n                        type: 'line',\n                        xAxisIndex: 1,\n                        // step: 'end',\n                        symbolSize: 7.5,\n                        itemStyle: {\n                            borderWidth: 2,\n                            borderColor: '#fff'\n                        }\n                    }, item);\n                });\n            })()\n        ]\n    };\n    myChart.setOption(option, true);\n}\n\n$.getJSON(uploadedDataURL, function(data) {\n    setOption(data);\n    myChart.hideLoading();\n    // 默认开启数据缩放\n    myChart.dispatchAction({\n        type: 'takeGlobalCursor',\n        key: 'dataZoomSelect',\n        dataZoomSelectActive: true\n    });\n    // 重置\n    /*myChart.dispatchAction({\n        type: 'restore'\n    });*/\n});"}
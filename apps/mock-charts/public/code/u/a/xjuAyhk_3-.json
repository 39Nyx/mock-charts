{"code":"const sourceData = [{\"id\":\"1470876252852527106\",\"parentId\":\"0\",\"children\":[{\"id\":\"1470876252852527107\",\"parentId\":\"1470876252852527106\",\"children\":[{\"id\":\"1470876252852527108\",\"parentId\":\"1470876252852527107\",\"children\":[],\"nodeName\":\"低频\"},{\"id\":\"1470876252852527109\",\"parentId\":\"1470876252852527107\",\"children\":[],\"nodeName\":\"高频\"}],\"nodeName\":\"基本面\"},{\"id\":\"1470876252852527110\",\"parentId\":\"1470876252852527106\",\"children\":[{\"id\":\"1470876252852527111\",\"parentId\":\"1470876252852527110\",\"children\":[],\"nodeName\":\"风险溢价\"},{\"id\":\"1470876252852527112\",\"parentId\":\"1470876252852527110\",\"children\":[],\"nodeName\":\"RAI\"},{\"id\":\"1470876252852527113\",\"parentId\":\"1470876252852527110\",\"children\":[],\"nodeName\":\"均线动量\"},{\"id\":\"1470876252852527114\",\"parentId\":\"1470876252852527110\",\"children\":[],\"nodeName\":\"资金\"}],\"nodeName\":\"市场趋势\"}],\"nodeName\":\"债券\"},{\"id\":\"1470876252852527115\",\"parentId\":\"0\",\"children\":[{\"id\":\"1470876252852527116\",\"parentId\":\"1470876252852527115\",\"children\":[{\"id\":\"1470876252852527117\",\"parentId\":\"1470876252852527116\",\"children\":[],\"nodeName\":\"估值\"},{\"id\":\"1470876252852527118\",\"parentId\":\"1470876252852527116\",\"children\":[],\"nodeName\":\"盈利\"}],\"nodeName\":\"基本面\"},{\"id\":\"1470876252852527119\",\"parentId\":\"1470876252852527115\",\"children\":[{\"id\":\"1470876252852527120\",\"parentId\":\"1470876252852527119\",\"children\":[],\"nodeName\":\"风险溢价\"},{\"id\":\"1470876252852527121\",\"parentId\":\"1470876252852527119\",\"children\":[],\"nodeName\":\"成交量\"},{\"id\":\"1470876252852527122\",\"parentId\":\"1470876252852527119\",\"children\":[],\"nodeName\":\"机构行为\"}],\"nodeName\":\"市场趋势\"},{\"id\":\"1470876252852527123\",\"parentId\":\"1470876252852527115\",\"children\":[],\"nodeName\":\"尾部信号\"}],\"nodeName\":\"股票\"},{\"id\":\"1470876252852527124\",\"parentId\":\"0\",\"children\":[],\"nodeName\":\"股票风格\"}]\r\nconst gapDeg = 3\r\nfunction getDepthAndSum(arr, depth, endNodeSum) {\r\n  var flag = false;\r\n  var temp = [];\r\n  for (let i = 0; i < arr.length; i++) {\r\n    arr[i].name = arr[i].nodeName\r\n    if (arr[i].children instanceof Array) { // 判断是否是数组\r\n      for (let j = 0; j < arr[i].children.length; j++) {\r\n        temp.push(arr[i].children[j]); // 解析出arr下第一层\r\n      }\r\n      flag = true;\r\n      if (arr[i].children.length === 0) {\r\n        endNodeSum++\r\n        arr[i].value = 1\r\n      } \r\n    }\r\n  }\r\n  if (flag) { // 如果还有数组，则继续解析，直到最后一层有不为数组为止\r\n    depth++;\r\n    return getDepthAndSum(temp, depth, endNodeSum); \r\n  } else {\r\n    return {depth, endNodeSum};\r\n  }\r\n}\r\nconst {depth, endNodeSum} = getDepthAndSum(sourceData, 0, 0)\r\nconst realData = []\r\nconst list = ['债券', '股票风格', '股票']\r\nlist.forEach((name) => {\r\n  const el = sourceData.find(({nodeName}) => nodeName === name)\r\n  realData.push(el)\r\n  realData.push({\r\n    value: (gapDeg / 360) * endNodeSum,\r\n    itemStyle: { opacity: 0, color: 'transparent' },\r\n    cursor: 'auto',\r\n    type: 'gap'\r\n  })\r\n})\r\nfunction handleSunburstData(arr, level, func) {\r\n  arr.forEach((item) => {\r\n    func(item, level)\r\n    if (item.children && item.children.length > 0 && item.type !== 'hideItem') {\r\n      handleSunburstData(item.children, level + 1, func)\r\n    }\r\n  })\r\n}\r\nfunction getSunburstData(index) {\r\n  const res = []\r\n  const cloneData = JSON.parse(JSON.stringify(realData))\r\n  let dataIndex = 0\r\n  handleSunburstData(cloneData, 1, (item, level) => {\r\n    dataIndex++\r\n    if (item.type === 'gap') { return }\r\n    if (index === 0) {\r\n      if (!item.children || (level < depth && item.children.length === 0)) {\r\n          item.dataIndex = dataIndex\r\n          item.label = { show: false }\r\n          item.itemStyle = { opacity: 0 }\r\n          item.emphasis = { label: { show: false } }\r\n          item.type = 'hideItem'\r\n          if (level === 1 ) {\r\n            item.seriesIndex = 1\r\n            item.children = [{\r\n              id: item.id,\r\n              value: 1,\r\n              dataIndex: dataIndex,\r\n              seriesIndex: 1,\r\n              itemStyle: { opacity: 0 },\r\n              children: [{\r\n                id: item.id,\r\n                value: 1,\r\n                dataIndex: dataIndex,\r\n                seriesIndex: 1,\r\n                itemStyle: { opacity: 0 }\r\n              }]\r\n            }]\r\n          }\r\n          if (level === 2) {\r\n            item.seriesIndex = 2\r\n            item.children = [{\r\n              id: item.id,\r\n              value: 1,\r\n              dataIndex: dataIndex,\r\n              seriesIndex: 2,\r\n              itemStyle: { opacity: 0 }\r\n            }]\r\n          }\r\n      }\r\n    } else {\r\n      if (level !== index || item.children.length !== 0) {\r\n          item.label = { show: false }\r\n          item.itemStyle = { opacity: 0 }\r\n          item.cursor = 'auto'\r\n          item.emphasis = { label: { show: false } }\r\n      }\r\n    }\r\n  })\r\n  return cloneData\r\n}\r\noption = {\r\n  title: {\r\n    text: '旭日图菜单'\r\n  },\r\n  series: [\r\n    {\r\n      type: 'sunburst',\r\n      radius: ['20%', '80%'],\r\n      center: ['50%', '50%'],\r\n      data: getSunburstData(0),\r\n      emphasis: {\r\n        focus: 'none'\r\n      },\r\n      sort: null,\r\n      label: {\r\n        rotate: 0\r\n      },\r\n      nodeClick: false,\r\n      z: 3,\r\n      startAngle: 90 - gapDeg / 2\r\n    },\r\n    {\r\n      type: 'sunburst',\r\n      radius: ['20%', '200%'],\r\n      center: ['50%', '50%'],\r\n      data: getSunburstData(1),\r\n      emphasis: {\r\n        focus: 'none'\r\n      },\r\n      sort: null,\r\n      label: {\r\n        rotate: 0\r\n      },\r\n      nodeClick: false,\r\n      silent: true,\r\n      startAngle: 90 - gapDeg / 2\r\n    },\r\n    {\r\n      type: 'sunburst',\r\n      radius: ['0%', '120%'],\r\n      center: ['50%', '50%'],\r\n      data: getSunburstData(2),\r\n      emphasis: {\r\n        focus: 'none'\r\n      },\r\n      sort: null,\r\n      label: {\r\n        rotate: 0\r\n      },\r\n      nodeClick: false,\r\n      silent: true,\r\n      startAngle: 90 - gapDeg / 2\r\n    },\r\n  ]\r\n};\r\nmyChart.on('mouseover', function(params) {\r\n  // 控制台打印数据的名称\r\n  if (params.data.dataIndex) {\r\n    const {seriesIndex, dataIndex} = params.data\r\n    myChart.dispatchAction({\r\n      type: 'highlight',\r\n      seriesIndex: seriesIndex,\r\n      dataIndex: dataIndex\r\n    });\r\n  }\r\n});\r\nmyChart.on('mouseout', function(params) {\r\n  // 控制台打印数据的名称\r\n  if (params.data.dataIndex) {\r\n    const {seriesIndex, dataIndex} = params.data\r\n    myChart.dispatchAction({\r\n      type: 'downplay',\r\n      seriesIndex: seriesIndex,\r\n      dataIndex: dataIndex\r\n    });\r\n  }\r\n});\r\nmyChart.on('click', function(params) {\r\n  // 控制台打印数据的名称\r\n  console.log(params.data.id);\r\n});"}
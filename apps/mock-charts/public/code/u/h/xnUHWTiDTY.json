{"code":"/**\n * 双x轴不等分情况实现思路\n * 一个网格为常规图，常规x轴作为子级\n * 另一个网格绘制柱状图，每根柱子就是一个父级，设置柱子的宽度（子级数占总数的百分比）即可\n * \n * 2021-12-06更新 支持区域缩放\n */\nconst baseData = [{\n\t\tvalue: '贵阳市',\n\t\tchildren: [\n\t\t\t{ value: '花溪区', num: 0.1 },\n\t\t\t{ value: '南明区', num: 0.15 },\n\t\t\t{ value: '观山湖区', num: 0.18 }\n\t\t]\n\t},{\n\t\tvalue: '六盘水市',\n\t\tchildren: [\n\t\t\t{ value: '钟山区', num: 0.25 },\n\t\t\t{ value: '六枝特区', num: 0.23 }\n\t\t]\n\t},{\n\t\tvalue: '遵义市',\n\t\tchildren: [\n\t\t\t{ value: '红花岗区', num: 0.32 },\n\t\t\t{ value: '汇川区', num: 0.33 },\n\t\t\t{ value: '遵义县', num: 0.36 }\n\t\t]\n\t},{\n\t\tvalue: '安顺市',\n\t\tchildren: [\n\t\t\t{ value: '西秀区', num: 0.57 },\n\t\t\t{ value: '平坝县', num: 0.72 }\n\t\t]\n\t},{\n\t\tvalue: '铜仁市',\n\t\tchildren: [\n\t\t\t{ value: '玉屏县', num: 0.45 }\n\t\t]\n}]\nconst dLength = baseData.map(item => item.children.length).reduce((n, m) => n + m) // x轴数据总长度，用于计算父级x轴的宽度\nlet xData = []\nlet yData = []\nlet series = [{\n\tdata: yData,\n\ttype: 'bar',\n\tlabel: {\n\t\tshow: true,\n\t\tposition: 'top',\n\t\ttextStyle: {\n\t\t\tcolor: '#555'\n\t\t}\n\t},\n\titemStyle: {\n\t\tcolor: (params) => {\n\t\t\treturn colorBg(params.dataIndex)\n\t\t}\n\t},\n\txAxisIndex: 0,\n\tyAxisIndex: 0\n}]\nlet baseObj = {\n\tdata: [{\n\t\tname: '',\n\t\tvalue: 1\n\t}],\n\tlabel: {\n\t\tshow: true,\n\t\tposition: 'inside',\n\t\tformatter: '{b}',\n\t\toffset: [0, 10],\n\t\ttextStyle: {\n\t\t\tcolor: '#666'\n\t\t}\n\t},\n\ttype: 'bar',\n\tbarGap: 0,\n\tbarWidth: '',\n\titemStyle: {\n\t\tcolor: '',\n\t\topacity: .8\n\t},\n\tanimationEasing: 'bounceOut',\n\txAxisIndex: 1,\n\tyAxisIndex: 1\n}\nbaseData.forEach((item, index) => {\n\tlet pObj = JSON.parse(JSON.stringify(baseObj))\n\tpObj.data[0].name = item.value\n\tpObj.barWidth = item.children.length / dLength * 100 + '%'\n\tpObj.itemStyle.color = colorBg(index)\n\tseries.push(pObj)\n\titem.children.forEach(cItem => {\n\t\txData.push({\n\t\t\tvalue: cItem.value,\n\t\t\tpName: item.value\n\t\t})\n\t\tyData.push(cItem.num)\n\t})\n})\n\nfunction colorBg(index) {\n\tconst colors = ['#4150d8', '#28bf7e', '#ed7c2f', '#f2a93b', '#f9cf36', '#4a5bdc', '#4cd698', '#f4914e', '#fcb75b', '#ffe180', '#b6c2ff', '#96edc1']\n\treturn colors[index]\n}\n\nmyChart.setOption({\n\ttooltip: {\n\t\ttrigger: 'axis',\n\t\taxisPointer: {\n\t\t\ttype: 'shadow'\n\t\t}\n\t},\n\tgrid: [{\n\t\t\ttop: 100,\n\t\t\tbottom: 111\n\t\t},{\n\t\t\theight: 60,\n\t\t\tbottom: 50,\n\t\t\ttooltip: { show: false }\n\t}],\n\tdataZoom: {\n\t\ttype: 'slider'\n\t},\n\txAxis: [{\n\t\ttype: 'category',\n\t\tdata: xData,\n\t\tgridIndex: 0,\n\t\taxisLabel: {\n\t\t\tcolor: '#333',\n\t\t},\n\t\taxisLine: {\n\t\t\tlineStyle: {\n\t\t\t\tcolor: '#e7e7e7'\n\t\t\t}\n\t\t},\n\t\taxisTick: {\n\t\t\tlineStyle: {\n\t\t\t\tcolor: '#e7e7e7'\n\t\t\t}\n\t\t},\n\t\tzlevel: 2\n\t}, {\n\t\ttype: 'category',\n\t\tgridIndex: 1,\n\t\taxisLine: { show: false },\n\t\taxisLabel: { show: false },\n\t\taxisTick: { show: false },\n\t\tzlevel: 1\n\t}],\n\tyAxis: [{\n\t\ttype: 'value',\n\t\tgridIndex: 0,\n\t\taxisLabel: {\n\t\t\tcolor: '#333'\n\t\t},\n\t\tsplitLine: {\n\t\t\tlineStyle: {\n\t\t\t\ttype: 'dashed'\n\t\t\t}\n\t\t},\n\t\taxisLine: {\n\t\t\tlineStyle: {\n\t\t\t\tcolor: '#ccc'\n\t\t\t}\n\t\t},\n\t\taxisTick: {\n\t\t\tlineStyle: {\n\t\t\t\tcolor: '#ccc'\n\t\t\t}\n\t\t}\n\t},{\n\t\ttype: 'value',\n\t\tgridIndex: 1,\n\t\taxisLabel: { show: false },\n\t\taxisLine: { show: false },\n\t\tsplitLine: { show: false },\n\t\taxisTick: { show: false }\n\t}],\n\tseries\n})\n\n// dataZoom缩放事件\nmyChart.on('dataZoom', params => {\n\tconst dataZoom = myChart.getModel().option.dataZoom[0]\n\tconst { startValue, endValue } = dataZoom\n\tlet curXdata = xData.slice(startValue, endValue + 1) // 缩放后的子级\n\tlet curPdata = [...new Set(curXdata.map(item => item.pName))] // 取出父级去重\n\tseries.length = 1 // \n\tcurPdata.forEach((item, index) => {\n\t\tlet length = 0\n\t\tcurXdata.forEach(cItem => {\n\t\t\tif (cItem.pName === item) {\n\t\t\t\tlength++\n\t\t\t}\n\t\t})\n\t\tlet pObj = JSON.parse(JSON.stringify(baseObj))\n\t\tpObj.data[0].name = item\n\t\tpObj.barWidth = length / curXdata.length * 100 + '%'\n\t\tpObj.itemStyle.color = colorBg(index)\n\t\tseries.push(pObj)\n\t})\n\tmyChart.setOption({\n\t\tseries\n\t}, {\n\t\treplaceMerge: 'series', // 替换合并series，默认普通合并\n\t})\n})"}
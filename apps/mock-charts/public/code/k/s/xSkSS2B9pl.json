{"code":"\nvar config = {\n    color: '#c0101a',\n    levels: 50,\n    intensity: 100,\n    threshold: 0.01\n}\n\nvar canvas = document.createElement('canvas');\ncanvas.width = 4096;\ncanvas.height = 2048;\ncontext = canvas.getContext(\"2d\");\n\ncontext.lineWidth = 0.4;\ncontext.strokeStyle = config.color;\ncontext.fillStyle = config.color;\ncontext.shadowColor = config.color;\n\nimage('/asset/get/s/data-1491837512042-rJlLfXYax.jpg').then(function(image) {\n  var m = image.height,\n      n = image.width,\n      values = new Array(n * m),\n      contours = d3.contours().size([n, m]).smooth(true),\n      projection = d3.geoIdentity().scale(canvas.width / n),\n      path = d3.geoPath(projection, context);\n\n//   StackBlur.R(image, 5);\n\n  for (var j = 0, k = 0; j < m; ++j) {\n    for (var i = 0; i < n; ++i, ++k) {\n      values[k] = image.data[(k << 2)] / 255;\n    }\n  }\n\n  var opt = {\n    image: canvas\n  }\n\n  var results = [];\n  function update(threshold, levels) {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    var thresholds = [];\n    for (var i = 0; i < levels; i++) {\n        thresholds.push((threshold + 1 / levels * i) % 1);\n    }\n    results = contours.thresholds(thresholds)(values);\n    redraw();\n  }\n\n  function redraw() {\n    results.forEach(function (d, idx) {\n        context.beginPath();\n        path(d);\n        context.globalAlpha = 1;\n        context.stroke();\n        if (idx > config.levels / 5 * 3) {\n            context.globalAlpha = 0.01;\n            context.fill();\n        }\n    });\n    onupdate();\n  }\n  \n  \n  update(config.threshold, config.levels);\n\n  initCharts(opt);\n\n\n});\n\nfunction image(url) {\n  return new Promise(function(resolve) {\n    var image = new Image;\n    image.src = url;\n    image.onload = function() {\n      var canvas = document.createElement(\"canvas\");\n      canvas.width = image.width / 4;\n      canvas.height = image.height / 4;\n      var context = canvas.getContext(\"2d\");\n      context.drawImage(image, 0, 0, canvas.width, canvas.height);\n      resolve(context.getImageData(0, 0, canvas.width, canvas.height));\n    };\n  });\n}\n\nvar contourChart = echarts.init(document.createElement('canvas'), null, {\n    width: 4096,\n    height: 2048\n});\n\nvar img = new echarts.graphic.Image({\n    style: {\n        x: -1,\n        y: -1\n    }\n});\n\nonupdate = function () {\n    img.dirty();\n}\n\nfunction initCharts(opt) {\n    img.style.width = opt.image.width + 2;\n    img.style.height = opt.image.height + 2;\n    img.style.image = opt.image;\n    contourChart.getZr().add(img);\n    \n    \n    myChart.setOption({\n        backgroundColor: '#000',\n        globe: {\n    \n            environment: '/asset/get/s/data-1491837999815-H1_44Qtal.jpg',\n    \n            heightTexture: '/asset/get/s/data-1491837512042-rJlLfXYax.jpg',\n    \n            displacementScale: 0.05,\n            displacementQuality: 'high',\n    \n            baseColor: '#111',\n    \n            shading: 'realistic',\n            realisticMaterial: {\n                roughness: 0.2,\n                metalness: 0\n            },\n    \n            postEffect: {\n                enable: true,\n                depthOfField: {\n                    // enable: true\n                }\n            },\n            light: {\n                ambient: {\n                    intensity: 0\n                },\n                main: {\n                    intensity: 0.1,\n                    shadow: false\n                },\n                ambientCubemap: {\n                    texture: '/asset/get/s/data-1491837984109-r1u7NmY6e.hdr',\n                    exposure: 1,\n                    diffuseIntensity: 0.5,\n                    specularIntensity: 2\n                }\n            },\n            viewControl: {\n                autoRotate: false\n            },\n    \n            layers: [{\n                type: 'blend',\n                blendTo: 'albedo',\n                texture: contourChart,\n                intensity: 50\n            }]\n        }\n    });\n}\n\n"}
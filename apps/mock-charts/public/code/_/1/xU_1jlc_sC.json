{"code":"// Mock数据\nconst mockData = {\n    xdata: [...new Array(33)].map((item, i) => `南城街道${i + 1}`) ,\n    result: [\n        { name: '已开通', data: [...new Array(33)].map((item, i) => +(Math.random(0,10) * 1000).toFixed(0) )},\n        { name: '未开通', data: [...new Array(33)].map((item, i) => +(Math.random(0,0.5) * 1000).toFixed(0) )},\n    ]\n}  \n        \nconst color = [\n    [{ offset: 0, color: 'rgba(239, 255, 55, .85)' }, { offset: 0.5, color: 'rgba(239, 255, 55, .85)' }, { offset: 0.5, color: 'rgba(213, 231, 0, .9)' }, { offset: 1, color: 'rgba(213, 231, 0, .9)' }],\n    [{ offset: 0, color: 'rgba(50, 255, 238, .85)' }, { offset: 0.5, color: 'rgba(50, 255, 238, .85)' }, { offset: 0.5, color: 'rgba(0, 216, 198, .9)' }, { offset: 1, color: 'rgba(0, 216, 198, .9)' }],\n]\nconst color2 = ['#efff37', '#32ffee']\n\n// tooltip\nconst tooltip = { \n    trigger: \"axis\",\n    textStyle: { fontSize: '100%' },\n    formatter: params => {\n        let rander = params.map(item => `<div>${item.seriesName}: ${item.value}</div>`).join('')\n        return rander   \n    }\n}\n\nconst legend = {\n    data: ['已开通', '未开通'],\n    textStyle: { fontSize: 12, color: '#fff'},\n    itemWidth: 24,\n    itemHeight: 15,\n    itemGap: 15,\n    top: '2%',\n    right: '2%',\n    selectedMode: false\n}\nconst grid = { top: '15%', left: '12%', right: '2%', bottom: '25%'}\n// xAxis\nconst xAxis = { \n    axisTick: { show: true },\n    axisLine: { lineStyle: { color: 'rgba(255,255,255, .2)' } },\n    axisLabel: { \n        rotate: 60,\n        textStyle: { fontSize: 12, color: '#fff' },\n    },\n    data: mockData.xdata,\n}\n\n// yAxis\nconst yAxis = [{ \n    axisTick: { show: false },\n    axisLine: { show: false },\n    splitLine: { lineStyle: { color: 'rgba(255,255,255, .05)' } },\n    axisLabel: { textStyle: { fontSize: 14, color: '#fff' } }\n},{\n    show: false,\n    splitLine: { show:false },\n    axisLine: { show: false },\n    axisTick: { show: false },\n}]\nconst diamondData = mockData.result.reduce((pre, cur, index) => {\n    pre[index] = cur.data.map((el, id) => el + ( pre[index - 1] ? pre[index - 1][id] : 0))\n    return pre\n}, [])\n\nlet series = mockData.result.reduce((p, c, i, array) => {\n    p.push({\n        z: i + 1,\n        stack: '总量',\n        type: 'bar',\n        name: c.name,\n        barGap: '-100%',\n        barWidth: 24,\n        data: c.data,\n        itemStyle:{ color: { type: 'linear', x: 0, x2: 1, y: 0, y2: 0, colorStops: color[i] } },\n    },{\n        z: i + 10,\n        type: 'pictorialBar',\n        symbolPosition: 'end',\n        symbol: 'diamond',\n        symbolOffset: [0, '-50%'],\n        symbolSize: [24, 10],\n        data: diamondData[i],\n        itemStyle: { color: color2[i] },\n        tooltip: { show: false },\n    })\n\n    // 是否最后一个了？\n    if (p.length  === (array.length) * 2) {\n        p.push({\n            z: array.length * 2,\n            type: \"pictorialBar\",\n            symbolPosition: \"start\",\n            data: mockData.result[0].data,\n            symbol: \"diamond\",\n            symbolOffset: [\"0%\", \"50%\"],\n            symbolSize: [24, 10],\n            itemStyle: { color: { type: 'linear', x: 0, x2: 1, y: 0, y2: 0, colorStops: color[0]} },\n            tooltip: { show: false },\n        })\n        return p\n    }\n\n    return p\n}, [])\n\nconst dataZoom = [{\n    show: false,\n    type: 'slider',\n    startValue: 0,\n    endValue: 7,\n    moveOnMouseWheel: true,\n    moveOnMouseMove: true,\n    zoomOnMouseWheel: false,\n}]\n\noption = { tooltip, legend, xAxis, yAxis, series, grid, dataZoom, backgroundColor: 'rgba(0, 0, 0, .8)' }\n\n// 定时器\nlet timer = null\n// 轮询\nfunction poll(startValue = 0, endValue = 7) {\n    timer = setInterval(() => {\n        // 如果是最后一个？\n        if (endValue >= 33) {\n            // 还原\n            myChart.dispatchAction({ type: 'dataZoom', startValue: startValue = 0, endValue: endValue = 7 })\n        } else {\n            // 轮播\n            myChart.dispatchAction({ type: 'dataZoom', startValue: startValue +=7, endValue: endValue += 7 })\n        }\n    }, 3 * 1000)\n}\n\n// 加入移入移出事件\nmyChart.on('mouseover', function(){\n    clearInterval(timer)\n})\n\nmyChart.on('mouseout', function(){  \n    const { startValue, endValue } = myChart.getModel().option.dataZoom[0]\n    poll(startValue, endValue)\n})\n\n// 启动轮询\npoll(0, 7)\n\n\n\n\n"}
{"code":"option = {\n    grid: [{\n            top: 40\n        },\n        {\n            top: 40\n        }\n    ],\n    legend: {\n        show: false\n    },\n    tooltip: {\n        trigger: 'axis',\n        formatter: (comp, value) => {\n            const [serie] = comp;\n\n            return `${serie.seriesName} ${serie.name}: ${Math.round(serie.value * 100)} %`\n        },\n        axisPointer: {\n            show: true,\n            status: 'shadow',\n            z: -1,\n            shadowStyle: {\n                color: '#E6F7FF',\n            },\n            type: 'shadow'\n        }\n    },\n    xAxis: [{\n            position: 'bottom',\n            type: 'category',\n            axisLine: {\n                show: true,\n                lineStyle: {\n                    color: '#ECF1F6'\n                }\n            },\n            axisTick: {\n                show: false,\n            },\n            axisLabel: {\n                show: true,\n                rotate: 0,\n                fontSize: 12,\n                color: '#3A3A3C'\n            },\n            splitLine: {\n                show: true,\n                lineStyle: {\n                    color: ['#ECF1F6', '#ECF1F6'],\n                    width: 0,\n                    type: 'dashed'\n                }\n            },\n            gridIndex: 0,\n            data: ['0-3岁', '4-15岁', '16-30岁', '31-45岁', '46-60岁', '61-75岁', '76-90岁', '91-115岁']\n        },\n        {\n            type: 'category',\n            gridIndex: 1,\n            show: false\n        }\n    ],\n    yAxis: [{\n            type: 'value',\n            position: 'left',\n            axisLine: {\n                show: false,\n            },\n            axisTick: {\n                show: false,\n            },\n            axisLabel: {\n                show: true,\n                rotate: 0,\n                fontSize: 12,\n                color: '#6E7D9C',\n                formatter: (value, index) => `${value * 100} %`\n            },\n            splitLine: {\n                show: true,\n                lineStyle: {\n                    color: ['#ECF1F6', '#ECF1F6'],\n                    width: 1,\n                    type: 'solid'\n                }\n            },\n            min: 0,\n            max: 1,\n            gridIndex: 0\n        },\n        {\n            gridIndex: 1,\n            min: 0,\n            max: 1,\n            show: false\n        }\n    ],\n    series: [{\n            name: '底部backdrop',\n            xAxisIndex: 1,\n            yAxisIndex: 1,\n            type: 'bar',\n            data: [1, 1, 1, 1, 1, 1, 1, 1].map((value) => {\n                return {\n                    value,\n                    itemStyle: {\n                        color: 'transparent'\n                    }\n                };\n            }),\n            barMaxWidth: '100%',\n            silent: true,\n            z: 2\n        },\n        {\n            name: 'xxx疾病人群感染情况',\n            xAxisIndex: 0,\n            yAxisIndex: 0,\n            itemStyle: {\n                color: '#43A7FF'\n            },\n            type: 'bar',\n            data: [0.3, 0.4, 0.5, 0.8, 0.7, 0.7, 0.5, 0.8],\n            barMaxWidth: '20%',\n            z: 3\n        }\n    ]\n};\n\nmyChart._dom.style.backgroundColor = '#fff';\n\nmyChart.on('click', function(component) {\n    const {\n        dataIndex\n    } = component;\n    const renderOption = myChart.getOption();\n\n    const {\n        series: [backDrop]\n    } = renderOption\n\n    backDrop.data.forEach((item, itemInd) => {\n        if (itemInd === dataIndex) {\n            item.itemStyle.color = '#CCEEFF'\n        } else {\n            item.itemStyle.color = 'transparent';\n        }\n    })\n\n    myChart.setOption(renderOption);\n\n})"}
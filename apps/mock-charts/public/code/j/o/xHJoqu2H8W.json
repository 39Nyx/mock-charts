{"code":"option = {\n    title: {\n        text: 'Draw Arrow Line（用鼠标画箭头）',\n        left: 'center'\n    }\n};\n\nsetTimeout(function () {\n    \n    var zr = myChart.getZr();\n    \n    var Arrow = echarts.graphic.extendShape({\n\n        type: 'arrow',\n\n        shape: {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0\n        },\n\n        buildPath: function (ctx, shape) {\n            var height = shape.height;\n            var width = shape.width;\n            var x = shape.x;\n            var y = shape.y;\n            var dx = width / 3 * 2;\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + dx, y + height);\n            ctx.lineTo(x, y + height / 4 * 3);\n            ctx.lineTo(x - dx, y + height);\n            ctx.lineTo(x, y);\n            ctx.closePath();\n        }\n    });\n    \n    var drawing;\n    var points = [];\n    var startPoint;\n    var traceEl;\n    var arrowEl;\n    \n    zr.on('mousedown', function (e) {\n        drawing = true;\n        startPoint = [e.offsetX, e.offsetY];\n\n        // 如果需要清除箭头，用这个逻辑。\n        // if (traceEl) {\n        //     zr.remove(traceEl);\n        // }\n        // if (arrowEl) {\n        //     zr.remove(arrowEl);\n        // }\n        \n        traceEl = new echarts.graphic.Line({\n            shape: {\n                x1: 0, y1: 0, x2: 0, y2: 0\n            },\n            style: {\n                stroke: 'red',\n                lineWidth: 1\n            }\n        });\n        arrowEl = new Arrow({\n            ignore: true,\n            shape: {\n                x: 0, y: 0, width: 10, height: 20\n            },\n            style: {\n                fill: 'red',\n                stroke: null\n            }\n        });\n        zr.add(traceEl);\n        zr.add(arrowEl);\n    });\n    \n    zr.on('mouseup', function (e) {\n        drawing = false;\n        points.length = 0;\n        startPoint = null;\n    })\n    \n    zr.on('mousemove', function (e) {\n        if (!drawing) {\n            return;\n        }\n        \n        traceEl.attr('shape', {\n            x1: startPoint[0],\n            y1: startPoint[1],\n            x2: e.offsetX,\n            y2: e.offsetY\n        });\n        \n        arrowEl.attr({\n            ignore: false,\n            position: [e.offsetX, e.offsetY],\n            rotation: Math.atan(\n                -(startPoint[1] - e.offsetY) / (startPoint[0] - e.offsetX)\n            ) \n            + (startPoint[0] > e.offsetX ? 1 : -1) * Math.PI / 2\n        })\n    })\n    \n    \n})"}
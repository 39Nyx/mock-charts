{"code":"const headers = ['2011-09-30', '2011-10-31', '2011-11-30', '2011-12-31', '2012-01-31', '2012-02-29', '2012-03-31', '2012-04-30', '2012-05-31', '2012-06-30', '2012-07-31', '2012-08-31', '2012-09-30', '2012-10-31', '2012-11-30', '2012-12-31', '2013-01-31', '2013-02-28', '2013-03-31', '2013-04-30', '2013-05-31', '2013-06-30', '2013-07-31', '2013-08-31', '2013-09-30', '2013-10-31', '2013-11-30', '2013-12-31', '2014-01-31', '2014-02-28', '2014-03-31', '2014-04-30', '2014-05-31', '2014-06-30', '2014-07-31', '2014-08-31', '2014-09-30', '2014-10-31', '2014-11-30', '2014-12-31', '2015-01-31', '2015-02-28', '2015-03-31', '2015-04-30', '2015-05-31', '2015-06-30', '2015-07-31', '2015-08-31', '2015-09-30', '2015-10-31'];\n\nconst srcData = [24.9654,null,null,16.7573,null,null,10.9466,null,null,7.6162,null,null,7.0672,null,null,12.0246,null,null,8.4632,null,null,9.5515,null,null,10.5731,null,null,6.8437,null,null,6.1885,null,null,6.857,null,null,6.6064,null,null,4.6705,null,null,-0.4302,null,null,0.0367,null,null,-5.9624,null]\nconst subData = [13.8,13.2,12.4,12.8,null,21.3,11.9,9.3,9.6,9.5,9.2,8.9,9.2,9.6,10.1,10.3,null,null,8.9,9.3,9.2,8.9,9.7,10.4,10.2,10.3,10,9.7,null,null,8.8,8.7,8.8,9.2,9,6.9,8,7.7,7.2,7.9,7.4477,6.06,5.6,5.9,6.1,6.8,6,6.1,5.7,5.6]\nconst thirdData = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1.5,1.8,1.9,1.8,1.8,1.7,1.6,1.6,1.7,1.8,1.8,1.8,2,1.7,1.7,1.6,1.7,1.7,1.7,1.6,1.5,1.4,1.3,1.3,1.2,1.574,1.4596,1.4699,1.5758,1.6943,1.6845,1.703,1.6362,1.4731]\nconst fourthData = [6.52, 5, 2.72, 1.69, 0.73, 0.03, -0.32, -0.7, -1.4, -2.08, -2.87, -3.48, -3.55, -2.76, -2.2, -1.94, -1.64, -1.63, -1.92, -2.62, -2.87, -2.7, -2.27, -1.62, -1.34, -1.51, -1.42, -1.36, -1.64, -2, -2.3019, -2.0042, -1.4464, -1.1092, -0.8688, -1.2038, -1.7996, -2.2428, -2.6928, -3.3152, -4.3202, -4.7976, -4.5603, -4.5725, -4.607, -4.8135, -5.3692, -5.9227, -5.945, -5.9]\nconst fifthData = [51.2, 50.4, 49, 50.3, 50.5, 51, 53.1, 53.3, 50.4, 50.2, 50.1, 49.1705, 49.8, 50.2, 50.6, 50.6, 50.4, 50.1, 50.9, 50.6, 50.8, 50.1, 50.3, 51, 51.1, 51.4, 51.4, 51, 50.5, 50.2, 50.3, 50.4, 50.8, 51, 51.7, 51.1, 51.1, 50.8, 50.3, 50.1, 49.8, 49.9, 50.1, 50.1, 50.2, 50.2, 50, 49.7, 49.8, 49.8]\nconst sixthData = [17.1, 15.9, 13.8, 13.4, -0.5, 18.4, 8.9, 4.9, 15.3, 11.3, 1, 2.7, 9.9, 11.6, 2.9, 14.1, 25, 21.8, 10, 14.7, 1, -3.1, 5.1, 7.2, -0.3, 5.6, 12.7, 4.3, 10.5, -18.1, -6.6, 0.8, 7.1, 7.2, 14.4, 9.4, 15.3, 11.6, 4.7, 9.7, -3.5, 48.2, -15.1, -6.6, -3.4, 1.5, -9.2, -5.8, -3.9, -7]\n\nconst getValueExtend = (data, bindZero) => {\n    let min = Math.min(...data);\n    let max = Math.max(...data);\n    if (min > 0 && bindZero) {\n        min = 0;\n    }\n    if (max < 0 && bindZero) {\n        max = 0;\n    }\n    return [min, max];\n};\n\nconst roundNumber = echarts.number.round;\nconst getPrecision = echarts.number.getPrecision;\nconst niceValueExtend = (extend, splitNumber = 5) => {\n    const [min, max] = extend;\n    const span = max - min;\n    const interval = span / splitNumber;\n    const niceInterval = echarts.number.nice(interval, true);\n    \n    const precision = getPrecision(niceInterval);\n    const niceMin = roundNumber(Math.floor(min / niceInterval) * niceInterval, precision);\n    const niceMax = roundNumber(Math.ceil(max / niceInterval) * niceInterval, precision);\n    \n    return {\n        min: niceMin,\n        max: niceMax,\n        interval: niceInterval\n    };\n};\n\nconst subNice = (value) => {\n    const ticks = [1, 1.2, 1.5, 2, 2.5, 3, 4, 5, 6, 8, 10];\n    const exponent = echarts.number.quantityExponent(value);\n    const exp10 = Math.pow(10, exponent);\n    const f = value / exp10; // 1 <= f < 10\n    \n    let nf;\n    for (let i = 0; i < ticks.length; i++) {\n        const item = ticks[i];\n        if (f <= item) {\n            nf = item;\n            break;\n        }\n    }\n    \n    let niceValue = nf * exp10;\n\n    // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).\n    // 20 is the uppper bound of toFixed.    \n    if (exponent >= -20) {\n        if (exponent < 0) {\n            niceValue = niceValue.toFixed(-exponent);\n        } else {\n            niceValue = niceValue.toFixed(0);\n        }\n    }\n    \n    return Number(niceValue);\n};\n\nconst subNiceValueExtend = (extend, splitNumber) => {\n    const [min, max] = extend;\n    const span = max - min;\n    const interval = span / (splitNumber - 1);\n    const niceInterval = subNice(interval);\n    const precision = getPrecision(niceInterval);\n    const niceMin = roundNumber(Math.floor(min / niceInterval) * niceInterval, precision);\n    const niceMax = roundNumber(niceMin + splitNumber * niceInterval, precision);\n    return {\n        min: niceMin,\n        max: niceMax,\n        interval: niceInterval\n    };\n};\n\nconst nice = niceValueExtend(getValueExtend(srcData, true));\nconst count = (nice.max - nice.min) / nice.interval;\nconst sub = subNiceValueExtend(getValueExtend([\n    ...subData, \n    ...thirdData,\n    ...fifthData,\n    ...sixthData,\n    ], true), count);\n\nconst GAP = 2;\nconst renderCircleSymbolItem = (params, api) => {\n    var bandWidth = api.size([0, 0])[0];\n    var symbolSize = 8;\n    var point = api.coord([api.value(0), api.value(1)]);\n\n    return {\n        type: 'circle',\n        transition: ['shape'],\n        shape: {\n            cx: point[0],\n            cy: point[1],\n            r: symbolSize / 2,\n        },\n        invisible: symbolSize > bandWidth / GAP,\n        style: api.style({\n            fill: api.visual('color'),\n            stroke: 'none',\n            lineWidth: 0\n        }),\n    };\n};\n\nconst renderDiamondSymbolItem = (params, api) => {\n    var bandWidth = api.size([0, 0])[0];\n    var symbolSize = 8;\n    var point = api.coord([api.value(0), api.value(1)]);\n\n    return {\n        type: 'rect',\n        transition: ['shape'],\n        originX: point[0],\n        originY: point[1],\n        rotation: Math.PI / 4,\n        shape: {\n            x: point[0] - symbolSize / 2,\n            y: point[1] - symbolSize / 2,\n            width: symbolSize,\n            height: symbolSize\n        },\n        invisible: symbolSize > bandWidth / GAP,\n        style: api.style({\n            fill: api.visual('color'),\n            stroke: 'none',\n            lineWidth: 0\n        }),\n    };\n};\n\nconst renderRectSymbolItem = (params, api) => {\n    var bandWidth = api.size([0, 0])[0];\n    var symbolSize = 8;\n    var point = api.coord([api.value(0), api.value(1)]);\n\n    return {\n        type: 'rect',\n        transition: ['shape'],\n        originX: point[0],\n        originY: point[1],\n        rotation: 0,\n        shape: {\n            x: point[0] - symbolSize / 2,\n            y: point[1] - symbolSize / 2,\n            width: symbolSize,\n            height: symbolSize\n        },\n        invisible: symbolSize > bandWidth / GAP,\n        style: api.style({\n            fill: api.visual('color'),\n            stroke: 'none',\n            lineWidth: 0\n        }),\n    };\n};\n\nconst renderTriangleSymbolItem = (params, api) => {\n    var bandWidth = api.size([0, 0])[0];\n    var symbolSize = 8;\n    var point = api.coord([api.value(0), api.value(1)]);\n    const x0 = point[0];\n    const y0 = point[1];\n    const cosTheta = Math.cos(Math.PI / 6);\n    const sinTheta = Math.sin(Math.PI / 6);\n    const r = symbolSize * 0.7;\n\n    return {\n        type: 'polygon',\n        transition: ['style'],\n        originX: point[0],\n        originY: point[1],\n        rotation: Math.PI,\n        shape: {\n            points: [\n                [x0, y0 - r],\n                [x0 + r * cosTheta, y0 + r * sinTheta],\n                [x0 - r * cosTheta, y0 + r * sinTheta],\n            ],\n        },\n        invisible: symbolSize > bandWidth / GAP,\n        style: api.style({\n            fill: api.visual('color'),\n            stroke: 'none',\n            lineWidth: 0\n        }),\n    };\n};\n\nconst renderInvTriangleSymbolItem = (params, api) => {\n    var bandWidth = api.size([0, 0])[0];\n    var symbolSize = 8;\n    var point = api.coord([api.value(0), api.value(1)]);\n    const x0 = point[0];\n    const y0 = point[1];\n    const cosTheta = Math.cos(Math.PI / 6);\n    const sinTheta = Math.sin(Math.PI / 6);\n    const r = symbolSize * 0.7;\n\n    return {\n        type: 'polygon',\n        transition: ['style'],\n        originX: point[0],\n        originY: point[1],\n        shape: {\n            points: [\n                [x0, y0 - r],\n                [x0 + r * cosTheta, y0 + r * sinTheta],\n                [x0 - r * cosTheta, y0 + r * sinTheta],\n            ],\n        },\n        invisible: symbolSize > bandWidth / GAP,\n        style: api.style({\n            fill: api.visual('color'),\n            stroke: 'none',\n            lineWidth: 0\n        }),\n    };\n};\n\noption = {\n    color: [\n      '#7cb5ec',\n      '#434348',\n      '#f7a35c',\n      '#8085e9',\n      '#f15c80',\n      '#c4ccd3',\n      '#e4d354',\n      '#2b908f',\n      '#f45b5b',\n      '#91e8e1'\n    ],\n    animation: true,\n    legend: {\n        type: 'scroll',\n        bottom: 18,\n    },\n    grid: {\n        top: 64,\n        bottom: 64,\n        left: 32,\n        right: 32,\n        containLabel: true,\n    },\n    xAxis: {\n        type: 'category',\n        data: headers,\n        axisLine: {\n            lineStyle: {\n                color: '#CCD6EB'\n            }\n        },\n        axisLabel: {\n            color: '#787B8A'\n        }\n    },\n    yAxis: [\n        {\n            type: 'value',\n            min: nice.min,\n            max: nice.max,\n            interval: nice.interval,\n            axisLine: {\n                show: true,\n                lineStyle: {\n                    color: '#CCD6EB'\n                }\n            },\n            axisTick: {show: true},\n            splitLine: {\n                show: true,\n                lineStyle: {\n                    color: '#E6E6E6'\n                }\n            },\n            axisLabel: {\n                color: '#787B8A'\n            }\n        },\n        {\n            type: 'value',\n            min: sub.min,\n            max: sub.max,\n            interval: sub.interval,\n            axisLine: {\n                show: true,\n                lineStyle: {\n                    color: '#CCD6EB'\n                }\n            },\n            axisTick: {show: true},\n            splitLine: {\n                show: false,\n            },\n            axisLabel: {\n                color: '#787B8A'\n            }\n        }\n    ],\n    tooltip: {\n        trigger: 'axis'\n    },\n    series: [\n        {\n            type: 'bar',\n            name: 'xxx',\n            data: srcData,\n            symbol: 'circle',\n            showSymbol: false,\n            symbolSize: 10,\n            connectNulls: true,\n            z: 0\n        },\n        // {\n        //     type: 'custom',\n        //     name: 'xxx',\n        //     data: srcData,\n        //     renderItem: renderCircleSymbolItem,\n        //     tooltip: {\n        //         show: false\n        //     },\n        //     z: 1\n        // },\n        {\n            type: 'line',\n            name: 'yyy',\n            data: subData,\n            symbol: 'diamond',\n            showSymbol: false,\n            symbolSize: 12,\n            connectNulls: true,\n            yAxisIndex: 1,\n            z: 2\n        },\n        {\n            type: 'custom',\n            name: 'yyy',\n            data: subData,\n            renderItem: renderDiamondSymbolItem,\n            tooltip: {\n                show: false\n            },\n            yAxisIndex: 1,\n            z: 3\n        },\n        {\n            type: 'line',\n            name: 'zzz',\n            data: thirdData,\n            symbol: 'triangle',\n            showSymbol: false,\n            symbolSize: 10,\n            symbolRotate: 180,\n            connectNulls: true,\n            yAxisIndex: 1,\n            z: 4\n        },\n        {\n            type: 'custom',\n            name: 'zzz',\n            data: thirdData,\n            renderItem: renderTriangleSymbolItem,\n            tooltip: {\n                show: false\n            },\n            yAxisIndex: 1,\n            z: 5\n        },\n         {\n            type: 'line',\n            name: 'aaa',\n            data: fifthData,\n            symbol: 'triangle',\n            showSymbol: false,\n            symbolSize: 10,\n            symbolRotate: 0,\n            connectNulls: true,\n            yAxisIndex: 1,\n            z: 6\n        },\n        {\n            type: 'custom',\n            name: 'aaa',\n            data: fifthData,\n            renderItem: renderInvTriangleSymbolItem,\n            tooltip: {\n                show: false\n            },\n            yAxisIndex: 1,\n            z: 7\n        },\n         {\n            type: 'line',\n            name: 'bbb',\n            data: sixthData,\n            symbol: 'rect',\n            showSymbol: false,\n            symbolSize: 10,\n            connectNulls: true,\n            yAxisIndex: 1,\n            z: 8\n        },\n        {\n            type: 'custom',\n            name: 'bbb',\n            data: sixthData,\n            renderItem: renderRectSymbolItem,\n            tooltip: {\n                show: false\n            },\n            yAxisIndex: 1,\n            z: 9\n        }\n    ]\n};\n\nconsole.log('...ggg...', myChart);\n\nmyChart.on('legendselectchanged', (params) => {\n    console.log(params);\n    option.legend = {\n        ...option.legend,\n        selected: {...params.selected},\n    };\n    \n    const sub = subNiceValueExtend(getValueExtend([\n        ...(params.selected['yyy'] ? subData : []), \n        ...(params.selected['zzz'] ? thirdData: []),\n        ...(params.selected['aaa'] ? fifthData: []),\n        ...(params.selected['bbb'] ? sixthData: []),\n    ], true), count);\n    \n    option.yAxis[1] = {\n        ...option.yAxis[1],\n        min: sub.min,\n        max: sub.max,\n        interval: sub.interval\n    };\n    \n    myChart.setOption(option, {lazyUpdate: true});\n    myChart.resize();\n    // myChart.setOption(option);\n    // myChart.resize({\n    //     animation: {duration: 1000},\n    //     silent: false\n    // });\n});\n\n\n"}
{"code":"const uploadedDataURL = \"/asset/get/s/data-1635996507570-wKX0ZDR56.json\";\n\nconst formatData = (data) => {\n    return data.map((v, i) => {\n        v.value = i;\n        if (v.children) {\n            v.children.map((vc, ic) => {\n                vc.value = ic;\n                if (vc.children) {\n                    vc.children.map((vcc, icc) => {\n                        vcc.value = icc;\n                        return vcc;\n                    });\n                }\n                return vc\n            })\n        }\n        return v;\n    })\n};\n\n\n$.getJSON(uploadedDataURL, (data) => {\n    console.log(data);\n    const [baseData, extendData] = data.children;\n    const leftData = formatData([baseData]);\n    const rightData = formatData([extendData]);\n    const myOption = {\n        backgroundColor: '#F8F8F8',\n        tooltip: {\n            trigger: 'item',\n            triggerOn: 'mousemove',\n        },\n        series: [\n            {\n                data: leftData,\n                name: 'root',\n                type: 'tree',\n                symbolSize: 0,\n                initialTreeDepth: -1,\n                expandAndCollapse: false,\n                right: '55%',\n                top: 0,\n                bottom: 0,\n                orient: 'RL',\n                label: {\n                    position: 'insideLeft',\n                    verticalAlign: 'middle',\n                    fontSize: 14,\n                    lineHeight: 20,\n                    align: 'left',\n                    padding: [5, 10],\n                    backgroundColor: '#F8F8F8',\n                    formatter: (params) => {\n                        const level = params.treeAncestors.length;\n                        if (level === 2) {\n                            return `{root|${params.name}}`;\n                        } else if (level === 3) {\n                            return params.name;\n                        }\n                        const indexs = params.treeAncestors\n                            .splice(2, level)\n                            .map(v => v.value);\n                        const [i, j] = indexs;\n                        const { tags } = baseData.children[i].children[j];\n                        if (tags) {\n                            const labels = tags.map(v => `{${v.color}|${v.name}}`);\n                            return `${params.name}\\n${labels}`;\n                        }\n                        return params.name;\n                    },\n                    rich: {\n                        root: {\n                            padding: 15,\n                            backgroundColor: '#FFF',\n                            borderColor: '#D4A4EB',\n                            borderWidth: 1,\n                            borderRadius: 4,\n                        },\n                        success: {\n                            padding: [4, 5, 2, 5],\n                            color: '#fff',\n                            backgroundColor: '#71CB2D',\n                            borderRadius: 4,\n                            verticalAlign: 'middle',\n                        },\n                        warning: {\n                            padding: [4, 5, 2, 5],\n                            color: '#fff',\n                            backgroundColor: '#FFA01E',\n                            borderRadius: 4,\n                            verticalAlign: 'middle',\n                        },\n                        danger: {\n                            padding: [4, 5, 2, 5],\n                            color: '#fff',\n                            backgroundColor: '#BF221F',\n                            borderRadius: 4,\n                            verticalAlign: 'middle',\n                        },\n                    },\n                },\n                leaves: {\n                    label: {\n                        position: 'left',\n                        verticalAlign: 'middle',\n                        align: 'right',\n                    },\n                },\n                lineStyle: {\n                    color: '#D4A4EB',\n                    curveness: 0.8,\n                },\n                emphasis: {\n                    focus: 'series',\n                },\n            },\n            {\n                data: rightData,\n                type: 'tree',\n                symbolSize: 0,\n                initialTreeDepth: -1,\n                expandAndCollapse: false,\n                left: '55%',\n                top: 0,\n                bottom: 0,\n                orient: 'LR',\n                label: {\n                    position: 'insideLeft',\n                    verticalAlign: 'middle',\n                    fontSize: 14,\n                    lineHeight: 20,\n                    align: 'right',\n                    padding: [5, 10],\n                    backgroundColor: '#F8F8F8',\n                    formatter: (params) => {\n                        const level = params.treeAncestors.length;\n                        if (level === 2) {\n                            return `{root|${params.name}}`;\n                        } else if (level === 3) {\n                            return params.name;\n                        }\n                        const indexs = params.treeAncestors\n                            .splice(2, level)\n                            .map(v => v.value);\n                        const [i, j] = indexs;\n                        const { tags } = extendData.children[i].children[j];\n                        if (tags) {\n                            const labels = tags.map(v => `{${v.color}|${v.name}}`);\n                            return `${params.name}\\n${labels}`;\n                        }\n                        return params.name;\n                    },\n                    rich: {\n                        root: {\n                            padding: 15,\n                            backgroundColor: '#FFF',\n                            borderColor: '#D4A4EB',\n                            borderWidth: 1,\n                            borderRadius: 4,\n                        },\n                        success: {\n                            padding: [4, 5, 2, 5],\n                            color: '#fff',\n                            backgroundColor: '#71CB2D',\n                            borderRadius: 4,\n                            verticalAlign: 'middle',\n                        },\n                        warning: {\n                            padding: [4, 5, 2, 5],\n                            color: '#fff',\n                            backgroundColor: '#FFA01E',\n                            borderRadius: 4,\n                            verticalAlign: 'middle',\n                        },\n                        danger: {\n                            padding: [4, 5, 2, 5],\n                            color: '#fff',\n                            backgroundColor: '#BF221F',\n                            borderRadius: 4,\n                            verticalAlign: 'middle',\n                        },\n                    },\n                },\n                leaves: {\n                    label: {\n                        position: 'left',\n                        verticalAlign: 'middle',\n                        align: 'left',\n                    },\n                },\n                lineStyle: {\n                    color: '#FFCCCC',\n                    curveness: 0.8,\n                },\n                emphasis: {\n                    focus: 'series',\n                },\n            },\n        ],\n    };\n    myChart.setOption(myOption);\n    myChart.on('click', function (params) {\n        // 控制台打印数据的名称\n        console.log(params);\n    });\n});\n"}
{"code":"var uploadedDataURL = \"/asset/get/s/data-1498994055008-rJJ5SUU4W.csv\";\n\n\nvar stratify = d3.stratify()\n    .parentId(function(d) { return d.id.substring(0, d.id.lastIndexOf(\".\")); });\n\n\nd3.csv(uploadedDataURL, function(error, rawData) {\n    if (error) throw error;\n\n    var root = stratify(rawData)\n        .sum(function(d) {\n            return d.value;\n        })\n        .sort(function(a, b) {\n            return b.value - a.value;\n        });\n    var maxDepth = 0;\n    var seriesData = root.descendants().map(function (node) {\n        maxDepth = Math.max(maxDepth, node.depth);\n        return [\n            node.value,\n            node.depth,\n            node.id\n        ];\n    });\n    var pieces = [];\n    for (var i = 0; i <= maxDepth; i++) {\n        pieces.push({value: i, label: 'Level ' + i});\n    }\n\n    function renderItem(params, api) {\n        var context = params.context;\n        if (!context.layout) {\n            \n            d3.pack()\n                .size([api.getWidth() - 2, api.getHeight() - 2])\n                .padding(3)(root);\n\n            context.layout = {};\n            root.descendants().forEach(function (node) {\n                context.layout[node.id] = {\n                    x: node.x,\n                    y: node.y,\n                    r: node.r,\n                    isLeaf: !node.children || !node.children.length\n                };\n            });\n        }\n\n        var nodePath = api.value(2);\n        var itemLayout = context.layout[nodePath];\n\n        var nodeName = '';\n        var textFont = api.font({\n            fontSize: 12,\n            fontFamily: 'Arial'\n        });\n\n        if (itemLayout.isLeaf && itemLayout.r > 10) {\n            nodeName = nodePath.slice(nodePath.lastIndexOf('.') + 1).split(/(?=[A-Z][^A-Z])/g).join('\\n');\n            nodeName = echarts.format.truncateText(nodeName, itemLayout.r, textFont, '.');\n        }\n\n        return {\n            type: 'circle',\n            shape: {\n                cx: itemLayout.x,\n                cy: itemLayout.y,\n                r: itemLayout.r\n            },\n            z2: api.value(1) * 2,\n            style: api.style({\n                text: nodeName,\n                textFont: textFont,\n                textPosition: 'inside'\n            }),\n            styleEmphasis: api.style({\n                text: nodeName,\n                textPosition: 'inside',\n                textFont: textFont,\n                stroke: 'rgba(0,0,0,0.5)',\n                lineWidth: 3\n            })\n        };\n    }\n\n    var option = {\n        xAxis: {\n            axisLine: {show: false},\n            axisTick: {show: false},\n            axisLabel: {show: false},\n            splitLine: {show: false}\n        },\n        yAxis: {\n            axisLine: {show: false},\n            axisTick: {show: false},\n            axisLabel: {show: false},\n            splitLine: {show: false}\n        },\n        tooltip: {},\n        visualMap: {\n            // show: false,\n            type: 'piecewise',\n            bottom: 40,\n            pieces: pieces,\n            dimension: 1,\n            inRange: {\n                color: ['#006edd', '#e0ffff']\n            }\n        },\n        series: {\n            type: 'custom',\n            renderItem: renderItem,\n            encode: {\n                tooltip: 0,\n                itemName: 2\n            },\n            data: seriesData\n        }\n    };\n\n    myChart.setOption(option);\n\n});"}
{"code":"/* @author:nie_moons\n*  @creatTime：2021-03-31 10:18\n*  @tips \n*  开启线图拖尾效果一卡一卡，因为圆的旋转和缩放使用的定时动画。解决方案：切图带拖尾效果。\n*  数据中通过 desc 对象描述绘制信息\n*    @type：线图轨迹。 0=》无，1=》外到内，2=》内到外，3 =》 双向\n*    @angle：相对于初始方向的逆时针夹角。默认从正东方向开始沿逆时针方向均匀分布。\n*  CalutePointToSplitCircle 计算外层节点分布位置\n*    @stratAngle：初始节点相对于初始方向的逆时针夹角\n*    @raduis：外层节点中心与中心点的距离\n*    @nodeRadius：外层节点自己的半径\n*    @emptyCenterRadius：中心点的半径\n*/\n\nlet points = [\n    {\n        name: '市城市管理局',\n        desc: {\n            type: 1,\n        },\n    },\n    {\n        name: '科大讯飞',\n        desc: {\n            type: 2,\n        },\n    },\n    {\n        name: '市水利局',\n        desc: {\n            type: 1,\n        },\n    },\n    {\n        name: '市政法委',\n        desc: {\n            type: 1,\n        },\n    },\n    {\n        name: '市自然资源和规划局',\n        desc: {\n            type: 1,\n        },\n    },\n    {\n        name: '市生态环境局',\n        desc: {\n            type: 1,\n        },\n    },\n    {\n        name: '市大数据局',\n        desc: {\n            type: 3,\n        },\n    },\n];\nlet color = ['#ffffff', '#36fff6', '#ffe93a', '#67f95f'];\nlet oneArr = [\n    {\n        name: '中心点',\n        desc: {\n            type: 0,\n        },\n        symbol: 'none',\n        symbolSize: 233,\n    },\n];\nlet erArr = points;\nlet allArr = [...oneArr, ...erArr],\n    dataArr = [];\n// 点\nallArr.forEach((el, ind) => {\n    if (el.desc.type > 0) {\n        el.symbolSize = 50;\n        el.symbol =\n            'path://M544 552.325V800a32 32 0 0 1-32 32 31.375 31.375 0 0 1-32-32V552.325L256 423.037a32 32 0 0 1-11.525-43.512A31.363 31.363 0 0 1 288 368l224 128 222.075-128a31.363 31.363 0 0 1 43.525 11.525 31.988 31.988 0 0 1-11.525 43.513L544 551.038z m0 0,M64 256v512l448 256 448-256V256L512 0z m832 480L512 960 128 736V288L512 64l384 224z m0 0';\n        el.itemStyle = {\n            color: color[el.desc.type],\n        };\n    }\n    el.label = {\n        normal: {\n            show: true,\n            position: 'bottom',\n            distance: 10,\n            color: color[el.desc.type],\n        },\n    };\n});\n\n// 圆形分区\nfunction CalutePointToSplitCircle(arr, option) {\n    const newArray = [];\n    const { length: arLen } = arr;\n    let single_angle = (360 / arLen).toFixed(2);\n    let UtilCalute = {\n        calute_x: (ang, radius) => {\n            return (Math.cos((ang * Math.PI) / 180).toFixed(2) * radius).toFixed(2);\n        },\n        calute_y: (ang, radius) => {\n            return (Math.sin((ang * Math.PI) / 180).toFixed(2) * radius).toFixed(2);\n        },\n    };\n    // 正东方向开始 逆时针方向\n    arr.forEach((e, index) => {\n        let itemDesc = e.desc;\n        let ang =\n            option.stratAngle +\n            (itemDesc.angle && typeof itemDesc.angle === 'number' ? itemDesc.angle : single_angle * index);\n        // 各节点中心点\n        const x = UtilCalute.calute_x(ang, option.raduis);\n        const y = UtilCalute.calute_y(ang, option.raduis);\n        // 各节点连接到中心的线段的起点  减去节点的半径\n        const x1 = UtilCalute.calute_x(ang, option.raduis - option.nodeRadius);\n        const y1 = UtilCalute.calute_y(ang, option.raduis - option.nodeRadius);\n        // 各节点连接到中心的线段的终点\n        const x0 = UtilCalute.calute_x(ang, option.emptyCenterRadius);\n        const y0 = UtilCalute.calute_y(ang, option.emptyCenterRadius);\n\n        e.value = [x, y]; // 节点中心点\n        e.lineData = [\n            [x1, y1],\n            [x0, y0],\n        ];\n        newArray.push(e);\n    });\n    return newArray;\n}\n\n// 线配置\nfunction linesConfig(arr) {\n    let dataArr = [];\n\n    function getFormatItem(item, start, end) {\n        return [\n            { coord: item.lineData[start] }, // 起点\n            {\n                coord: item.lineData[end],\n                lineStyle: {\n                    color: '#0BC6FE',\n                    curveness: item.desc.type === 3 ? 0.1 : 0,\n                },\n                effect: {\n                    color: color[item.desc.type],\n                },\n            }, // 终点\n        ];\n    }\n\n    arr.forEach((el) => {\n        switch (el.desc.type) {\n            case 0:\n                break;\n            case 1:\n                // 外到内\n                dataArr.push(getFormatItem(el, 0, 1));\n                break;\n            case 2:\n                // 内到外\n                dataArr.push(getFormatItem(el, 1, 0));\n                break;\n            case 3:\n                // 双向\n                dataArr.push(getFormatItem(el, 0, 1));\n                dataArr.push(getFormatItem(el, 1, 0));\n                break;\n        }\n    });\n    return dataArr;\n}\n\n// 点分布\noneArr = CalutePointToSplitCircle(oneArr, {\n    stratAngle: 0,\n    raduis: 0,\n    nodeRadius: 0,\n    emptyCenterRadius: 0,\n});\nerArr = CalutePointToSplitCircle(erArr, {\n    stratAngle: 0,\n    raduis: 40,\n    nodeRadius: 5,\n    emptyCenterRadius: 10,\n});\n\nallArr = [...oneArr, ...erArr];\n// 线坐标和配置\ndataArr = linesConfig(allArr);\n// 生成虚线 饼图数据\nfunction generateData(totalNum, bigvalue, smallvalue, color) {\n    let dataArr = [];\n    for (var i = 0; i < totalNum; i++) {\n        if (i % 2 === 0) {\n            dataArr.push({\n                name: (i + 1).toString(),\n                value: bigvalue,\n                itemStyle: {\n                    normal: {\n                        color: color,\n                        borderWidth: 0,\n                    },\n                },\n            });\n        } else {\n            dataArr.push({\n                name: (i + 1).toString(),\n                value: smallvalue,\n                itemStyle: {\n                    normal: {\n                        color: 'rgba(0,0,0,0)',\n                        borderWidth: 0,\n                    },\n                },\n            });\n        }\n    }\n    return dataArr;\n}\n\nlet dolitData = generateData(100, 25, 20, 'rgb(126,190,255)');\nlet threeData = generateData(6, 40, 10, '#2dc0c9');\n\nfunction getOption(startAngle, radius) {\n    let option = {\n        backgroundColor: '#081c47',\n        title: {\n            text: '自定义方向的数据流向动画',\n            left: 'center',\n            textStyle: {\n                color: '#fff',\n            },\n        },\n        xAxis: {\n            show: false,\n            type: 'value',\n            max: 50,\n            min: -51,\n        },\n        grid: {\n            top: 10,\n            bottom: 10,\n            left: 10,\n            right: 10,\n        },\n        yAxis: {\n            show: false,\n            type: 'value',\n            max: 50,\n            min: -50,\n        },\n        graphic: {\n            elements: [\n                {\n                    type: 'text',\n                    z: 7,\n                    style: {\n                        text: '地理信息中台',\n                        textAlign: 'center',\n                        fill: '#fff',\n                        font: '30px \"Microsoft YaHei\"',\n                    },\n                    left: 'center',\n                    top: 'center',\n                },\n                {\n                    type: 'image',\n                    z: 4,\n                    style: {\n                        image: './asset/get/s/data-1641374427371-xPKsRNQ2l.png',\n                        width: 170,\n                        height: 170,\n                    },\n                    left: 'center',\n                    top: 'center',\n                },\n            ],\n        },\n        series: [\n            {\n                name: '节点',\n                type: 'graph',\n                silent: false,\n                hoverAnimation: false, // 鼠标悬浮高亮\n                cursor: 'default',\n                coordinateSystem: 'cartesian2d',\n                z: 3,\n                lineStyle: {\n                    width: 2,\n                    color: 'source',\n                    type: 'dashed',\n                },\n                data: allArr,\n            },\n            {\n                name: '线图',\n                type: 'lines',\n                hoverAnimation: false,\n                silent: false,\n                cursor: 'default',\n                coordinateSystem: 'cartesian2d',\n                polyline: false, // 多线段\n                z: 1,\n                lineStyle: {\n                    width: 2,\n                    type: 'dashed',\n                    curveness: 0,\n                },\n                effect: {\n                    show: true,\n                    period: 8, //箭头指向速度，值越小速度越快\n                    trailLength: 0, //特效尾迹长度[0,1]值越大，尾迹越长重\n                    symbol: 'arrow', //箭头图标\n                    symbolSize: 6,\n                },\n                emphasis: {\n                    lineStyle: {\n                        type: 'dashed',\n                    },\n                },\n                data: dataArr,\n            },\n            {\n                name: '不动外圆',\n                type: 'pie',\n                zlevel: 4,\n                silent: true,\n                radius: ['60%', '59%'],\n                label: {\n                    normal: {\n                        show: false,\n                    },\n                },\n                labelLine: {\n                    normal: {\n                        show: false,\n                    },\n                },\n                data: dolitData,\n            },\n            {\n                type: 'pie',\n                name: '旋转圆',\n                zlevel: 20,\n                silent: true,\n                radius: ['50%', '49%'],\n                hoverAnimation: false,\n                startAngle: startAngle,\n                data: threeData,\n                label: {\n                    normal: {\n                        show: false,\n                    },\n                },\n                labelLine: {\n                    normal: {\n                        show: false,\n                    },\n                },\n            },\n            {\n                name: '缩放圆',\n                type: 'pie',\n                zlevel: 4,\n                silent: true,\n                radius: [radius + 1 + '%', radius + '%'],\n                label: {\n                    normal: {\n                        show: false,\n                    },\n                },\n                labelLine: {\n                    normal: {\n                        show: false,\n                    },\n                },\n                data: dolitData,\n            },\n        ],\n    };\n    return option;\n}\n\nlet startAngle = 50; // 初始旋转角度\nlet [minradius, radius, maxradius] = [22, 22, 24]; // 最小、初始、最大 缩放尺寸\nlet isBig = true; // 缩放动画 标识\n\nfunction draw() {\n    startAngle = startAngle - 5;\n    if (isBig) {\n        radius = radius + 0.5;\n        if (radius > maxradius) {\n            isBig = false;\n        }\n    } else {\n        radius = radius - 0.5;\n        if (radius < minradius) {\n            isBig = true;\n        }\n    }\n    let option = getOption(startAngle, radius);\n    myChart.setOption(option, true);\n}\n\ntimer = setInterval(draw, 200);\n"}
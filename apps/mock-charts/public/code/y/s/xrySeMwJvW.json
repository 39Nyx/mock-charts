{"code":"var simplex = new SimplexNoise();\n\nwindow.onresize = myChart.resize;\n\nvar UPDATE_DURATION = 1000;\n\nfunction initVisualizer() {\n\n    var config = {\n        numWaves: 2,\n        randomize: randomize,\n        color1: '#000',\n        color2: \"#300\",\n        color3: \"#fff\",\n        size: 150,\n        roughness: 0.5,\n        metalness: 0.\n    };\n\n    gui = new dat.GUI();\n    //gui.add(config, \"numWaves\", 1, 3).name(\"Waves number\").onChange(update).listen();\n    for (var i = 0; i < 2; i++) {\n        config[\"wave\" + i + \"axis\" + \"x\"] = Math.random();\n        config[\"wave\" + i + \"axis\" + \"y\"] = Math.random();\n        config[\"wave\" + i + \"rounding\"] = Math.random();\n        config[\"wave\" + i + \"square\"] = Math.random();\n        gui.add(config, \"wave\" + i + \"axis\" + \"x\", 0, 1).name(\"Wave \" + (i + 1) + \" width\").onChange(update);\n        gui.add(config, \"wave\" + i + \"axis\" + \"y\", 0, 1).name(\"Wave \" + (i + 1) + \" depth\").onChange(update);\n        gui.add(config, \"wave\" + i + \"rounding\", 0, 1).name(\"Wave \" + (i + 1) + \" grow\").onChange(update);\n        gui.add(config, \"wave\" + i + \"square\", 0, 1).name(\"Wave \" + (i + 1) + \" square\").onChange(update);\n    }\n    gui.addColor(config, 'color1').onChange(update);\n    gui.addColor(config, 'color2').onChange(update);\n    gui.addColor(config, 'color3').onChange(update);\n    gui.add(config, 'roughness', 0, 1).onChange(update);\n    gui.add(config, 'metalness', 0, 1).onChange(update);\n\n    gui.add(config, \"randomize\").name(\"Randomize\")\n\n    function randomize() {\n        //config.numWaves = Math.floor(Math.random() * 3) + 1;\n        for (var i = 0; i < 2; i++) {\n            config[\"wave\" + i + \"axis\" + \"x\"] = Math.random();\n            config[\"wave\" + i + \"axis\" + \"y\"] = Math.random();\n            config[\"wave\" + i + \"rounding\"] = Math.random();\n            config[\"wave\" + i + \"square\"] = Math.random();\n        }\n\n        // Iterate over all controllers\n        for (var i in gui.__controllers) {\n            gui.__controllers[i].updateDisplay();\n        }\n        update();\n    }\n\n    function update() {\n        var item = [];\n        var dataProvider = [];\n\n        var mod = .1\n\n        //config.numWaves = Math.round(config.numWaves)\n\n        //var occurenceR = Math.random() * .02\n        //var r = 0//Math.random()\n        for (var s = 0; s < config.size * config.size; s++) {\n            var x = s % config.size;\n            var y = Math.floor(s / config.size);\n\n            //if (Math.random() < occurenceR)\n            //    r = Math.random()\n\n            var output = 0;\n            for (var i = 0; i < config.numWaves; i++) {\n                var n = simplex.noise2D(i * 213 + (-50 + x) * mod * (1 - config[\"wave\" + i + \"axis\" + \"x\"]) * .5, i * 3124 + (-50 + y) * mod * (1 - config[\"wave\" + i + \"axis\" + \"y\"]) * .5)\n                n = Math.pow(n, 1.95 - 1.9 * config[\"wave\" + i + \"rounding\"])\n                var square = Math.floor((1.1 - config[\"wave\" + i + \"square\"]) * 100)\n                n = Math.round(n * square) / square\n                    //output*=n\n                if (output < n)\n                    output = n;\n            }\n            dataProvider.push([x, y, (output + .1) * 2]);\n        }\n\n\n        myChart.setOption({\n            visualMap: {\n                inRange: {\n                    barSize: 100 / config.size,\n                    color: [config.color1, config.color2, config.color3],\n                }\n            },\n            series: [{\n                data: dataProvider,\n                realisticMaterial: {\n                    roughness: config.roughness,\n                    metalness: config.metalness\n                }\n            }]\n        });\n        //setTimeout(update, UPDATE_DURATION);\n    }\n\n    update();\n}\nvar focalRange = 40\nvar blurRadius = 4\n\noption = {\n    toolbox: {\n        left: 20,\n        iconStyle: {\n            normal: {\n                borderColor: '#fff'\n            }  \n        },\n        feature: {\n            myExportObj: {\n                title: 'Export OBJ',\n                icon: 'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0',\n                onclick: function () {\n                    var res = echarts.exportGL2PLY(myChart, {\n                        mainType: 'grid3D',\n                        index: 0\n                    });\n                    download(res, 'bar3D.ply', 'text/plain');\n                }\n            }\n        }\n    },\n    tooltip: {},\n    visualMap: {\n        show: false,\n        min: 0.1,\n        max: 2.5,\n        inRange: {\n            color: ['#000', '#300', '#fff']\n        }\n    },\n    xAxis3D: {\n        type: 'value'\n    },\n    yAxis3D: {\n        type: 'value'\n    },\n    zAxis3D: {\n        type: 'value',\n        min: -6,\n        max: 6\n    },\n    grid3D: {\n        show: false,\n        environment: '#000',\n        viewControl: {\n            distance: 100,\n            maxDistance: 150,\n            minDistance: 50,\n            alpha: 38,\n            beta: 220,\n            minAlpha: 10,\n            //maxBeta: 360,\n        },\n        postEffect: {\n            enable: true,\n            SSAO: {\n                enable: true,\n                intensity: 1.3,\n                radius: 5\n            },\n            screenSpaceReflection: {\n                enable: true\n            },\n            depthOfField: {\n                enable: true,\n                blurRadius: blurRadius,\n                focalRange: focalRange,\n                focalDistance: 70\n            }\n        },\n        light: {\n            main: {\n                intensity: 1,\n                shadow: true,\n                shadowQuality: 'high',\n                alpha: 30\n            },\n            ambient: {\n                intensity: 0\n            },\n            ambientCubemap: {\n                texture: '/asset/get/s/data-1491838644249-ry33I7YTe.hdr',\n                exposure: 2,\n                diffuseIntensity: 1,\n                specularIntensity: 1\n            }\n        }\n    },\n    series: [{\n        type: 'bar3D',\n        silent: true,\n        shading: 'realistic',\n        realisticMaterial: {\n            roughness: 0.5,\n            metalness: 0\n        },\n        instancing: true,\n        barSize: 0.6,\n        data: [],\n        lineStyle: {\n            width: 4\n        },\n        itemStyle: {\n            color: \"#fff\"\n        },\n        animation: false,\n        animationDurationUpdate: UPDATE_DURATION\n    }]\n};\n\nsetTimeout(function() {\n    initVisualizer();\n})"}